Enclosed are two programming problems.  Please read both descriptions thoroughly, then create a program to solve only **ONE** of the problems.   

For the solution you may use Java, Python, or C++.  You may **not** use any external libraries to solve this problem, but you may use external libraries or tools for building or testing purposes. Specifically, you can use unit testing libraries and build tools available for your chosen language (e.g., JUnit, Ant, etc.).

You may also include a brief explanation of your design and assumptions along with your code.

-----

Introduction to the problems
============================

Both problems below require some kind of input. You are free to implement any mechanism for feeding input into your solution (for example, using hard coded data within a unit test).  You should provide sufficient evidence that your solution is complete by, as a minimum, indicating that it works correctly against the supplied test data.


PROBLEM ONE: TRAINS
===================

Problem:  The local commuter railroad services a number of towns in Kiwiland.  Because of monetary concerns, all of the tracks are 'one-way.'  That is, a route from Kaitaia to Invercargill does not imply the existence of a route from Invercargill to Kaitaia.  In fact, even if both of these routes do happen to exist, they are distinct and are not necessarily the same distance!

The purpose of this problem is to help the railroad provide its customers with information about the routes.  In particular, you will compute the distance along a certain route, the number of different routes between two towns, and the shortest route between two towns.

Input:  A directed graph where a node represents a town and an edge represents a route between two towns.  The weighting of the edge represents the distance between the two towns.  A given route will never appear more than once, and for a given route, the starting and ending town will not be the same town.


Output
------
For test input 1 through 5, if no such route exists, output 'NO SUCH ROUTE'.  Otherwise, follow the route as given; do not make any extra stops!  For example, the first problem means to start at city A, then travel directly to city B (a distance of 5), then directly to city C (a distance of 4).

1. The distance of the route A-B-C.
2. The distance of the route A-D.
3. The distance of the route A-D-C.
4. The distance of the route A-E-B-C-D.
5. The distance of the route A-E-D.
6. The number of trips starting at C and ending at C with a maximum of 3 stops.  In the sample data below, there are two such trips: C-D-C (2 stops). and C-E-B-C (3 stops).
7. The number of trips starting at A and ending at C with exactly 4 stops.
In the sample data below, there are three such trips: A to C (via B,C,D); A to C (via D,C,D); and A to C (via D,E,B).
8. The length of the shortest route (in terms of distance to travel) from A to C.
9. The length of the shortest route (in terms of distance to travel) from B to B.
10. The number of different routes from C to C with a distance of less than 30.  In the sample data, the trips are: CDC, CEBC, CEBCDC, CDCEBC, CDEBC, CEBCEBC, CEBCEBCEBC.


Test Input
----------
For the test input, the towns are named using the first few letters of the alphabet from A to E.  A route between two towns (A to B) with a distance of 5 is represented as AB5.

Graph: AB5, BC4, CD8, DC8, DE6, AD5, CE2, EB3, AE7


Expected Output
---------------
Output #1: 9
Output #2: 5
Output #3: 13
Output #4: 22
Output #5: NO SUCH ROUTE
Output #6: 2
Output #7: 3
Output #8: 9
Output #9: 9
Output #10: 7

-----


PROBLEM TWO: THE HAPLESS DATA COLLECTORS
========================================

A team of data collectors are to be sent to map and take pictures in a rural area. This area must be navigated by the data collectors so that they can take pictures of the surrounding terrain to send back to us. From the sattelite data we know the position of what needs to have pictures taken and from what angle.

A team member's position and direction they are facing is represented by a combination of x and y co-ordinates and a letter representing one of the four cardinal compass points. The area is divided up into a grid to simplify navigation. An example position might be 0, 0, N, which means the data collector is in the bottom left corner of the area and facing North.

In order to tell the collectors where to go they are sent a simple string of letters in an SMS. The possible letters are 'L', 'R' and 'M'. 'L' and 'R' tells the person to turn 90 degrees left or right respectively, without moving.  'M' means move forward one grid point, and maintain the same heading.

Assume that the square directly North from (x, y) is (x, y+1). The lower-left coordinates of the area are assumed to be 0,0.


Input
-----
The first line of the input is information that a data collector sends to us to get instructions. Each person sends their position. The position is made up of two integers and a letter separated by spaces, corresponding to the x and y co-ordinates and the person's orientation.

The second line are the instructions sent back telling the person how to explore the area.


Output
------
The output for each person should be their final co-ordinates and heading.


Test Input
----------
1 2 N
LMLMLMLMM

3 3 E
MMRMMRMRRM


Expected Output
---------------
1 3 N

5 1 E